
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftNEEQleftGTLTLEGEleftSUMSUBleftMULDIVMODAND ASSIGN BOOLEAN COLON COMMA DIV ELSE ELSEIF EQ ERROR FALSE FLOAT FLOATNUMBER FOR FUNCTION GE GT ID IF IN INTEGER INTEGERNUMBER LCB LE LRB LSB LT MAIN MOD MUL NE NOT ON OR PRINT RCB RETURN RRB RSB SEMICOLON SUB SUM THEN TRUE WHERE WHILEprogram : declist MAIN LRB RRB blockdeclist : declist dec\n                   | epsilondec : vardec\n               | funcdectype : INTEGER\n                | FLOAT\n                | BOOLEANiddec : ID\n                 | ID LSB exp RSB\n                 | ID ASSIGN expidlist : iddec\n                  | idlist COMMA iddecvardec : idlist COLON type SEMICOLONfuncdec : FUNCTION ID LRB paramdecs RRB COLON type block\n                   | FUNCTION ID LRB paramdecs RRB blockparamdecs : paramdecslist\n                     | epsilonparamdecslist : paramdec\n                         | paramdecslist COMMA paramdecparamdec : ID COLON type\n                    | ID LSB RSB COLON typeblock : LCB stmtlist RCBstmtlist : stmt\n        | stmtlist stmt\n        | epsilonlvalue : ID\n        | ID LSB exp RSBcase : WHERE const COLON stmtlistcases : case\n        | cases case\n        | epsilonstmt : ostmt\n        | mstmtmstmt : IF LRB exp RRB mstmt elseiflist ELSE mstmt\n        | RETURN exp SEMICOLON\n        | exp SEMICOLON\n        | block\n        | vardec\n        | WHILE LRB exp RRB stmt\n        | ON LRB exp RRB LCB cases RCB SEMICOLON\n        | FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt\n        | FOR LRB ID IN ID RRB stmt\n        | PRINT LRB ID RRB SEMICOLONostmt : IF LRB exp RRB mstmt elseiflist\n        | IF LRB exp RRB mstmt elseiflist ELSE ostmtelseiflist : elseiflist ELSEIF LRB exp RRB stmt\n        | epsilonexp : ID LSB exp RSB ASSIGN exp\n        | ID ASSIGN exp\n        | exp SUM exp\n        | exp SUB exp\n        | exp MUL exp\n        | exp MOD exp\n        | exp DIV exp\n        | exp AND exp\n        | exp OR exp\n        | exp GT exp\n        | exp GE exp\n        | exp NE exp\n        | exp EQ exp\n        | exp LE exp\n        | exp LT exp\n        | const\n        | lvalue\n        | ID LRB explist RRB\n        | LRB exp RRB\n        | ID LRB RRB\n        | SUB exp\n        | NOT expconst : INTEGERNUMBER\n        | FLOATNUMBER\n        | TRUE\n        | FALSEexplist : exp\n        | explist COMMA expepsilon :'
    
_lr_action_items = {'MAIN':([0,2,3,5,6,7,39,103,117,143,],[-77,4,-3,-2,-4,-5,-14,-23,-16,-15,]),'FUNCTION':([0,2,3,5,6,7,39,103,117,143,],[-77,9,-3,-2,-4,-5,-14,-23,-16,-15,]),'ID':([0,2,3,5,6,7,9,14,16,17,24,27,30,31,38,39,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,72,73,74,83,103,104,105,106,108,109,110,111,112,113,117,121,123,133,135,136,138,139,143,146,147,151,152,153,154,159,160,162,168,169,170,171,172,173,174,175,178,179,181,182,183,],[-77,10,-3,-2,-4,-5,15,10,25,25,40,25,25,25,78,-14,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,78,-24,-26,-33,-34,25,-38,-39,40,-23,-25,25,-37,25,25,127,25,25,130,-16,25,-36,25,78,78,25,150,-15,-77,-40,-44,25,-45,-48,25,78,78,-43,78,-35,-46,25,-41,78,78,78,-42,78,78,-47,]),'$end':([1,37,103,],[0,-1,-23,]),'LRB':([4,15,16,17,25,27,30,31,38,39,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,72,73,74,75,76,77,78,79,103,104,105,106,108,109,110,111,112,121,123,127,133,135,136,138,145,146,147,151,152,153,154,159,160,162,163,168,169,170,171,172,173,174,175,178,179,181,182,183,],[12,24,30,30,47,30,30,30,30,-14,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-24,-26,-33,-34,105,30,-38,-39,108,109,110,47,113,-23,-25,30,-37,30,30,30,30,30,30,-36,47,30,30,30,30,152,-77,-40,-44,30,-45,-48,30,30,30,172,-43,30,-35,-46,30,-41,30,30,30,-42,30,30,-47,]),'COLON':([8,10,11,23,25,28,29,32,33,34,35,36,40,48,62,64,78,82,85,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,115,119,120,129,140,144,166,],[13,-9,-12,-13,-27,-64,-65,-71,-72,-73,-74,-11,80,-10,-69,-70,-9,116,-50,-68,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,131,-28,-66,-11,-10,-49,174,]),'COMMA':([8,10,11,20,21,22,23,25,28,29,32,33,34,35,36,42,44,48,62,64,78,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,114,118,119,120,129,134,140,142,144,],[14,-9,-12,-6,-7,-8,-13,-27,-64,-65,-71,-72,-73,-74,-11,83,-19,-10,-69,-70,-9,-50,121,-68,-75,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-21,-20,-28,-66,-11,-76,-10,-22,-49,]),'LSB':([10,25,40,78,127,],[16,45,81,111,45,]),'ASSIGN':([10,25,78,119,127,140,],[17,46,112,133,46,133,]),'RRB':([12,20,21,22,24,25,28,29,32,33,34,35,41,42,43,44,47,62,63,64,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,114,118,119,120,122,124,125,130,134,142,144,150,161,167,177,],[18,-6,-7,-8,-77,-27,-64,-65,-71,-72,-73,-74,82,-17,-18,-19,87,-69,102,-70,-50,120,-68,-75,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-21,-20,-28,-66,135,136,137,141,-76,-22,-49,160,169,175,181,]),'INTEGER':([13,80,116,131,],[20,20,20,20,]),'FLOAT':([13,80,116,131,],[21,21,21,21,]),'BOOLEAN':([13,80,116,131,],[22,22,22,22,]),'SUB':([16,17,25,26,27,28,29,30,31,32,33,34,35,36,38,39,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,74,78,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,119,120,121,122,123,124,125,126,127,128,129,133,134,135,136,138,140,144,146,147,149,151,152,153,154,159,160,161,162,167,168,169,170,171,172,173,174,175,177,178,179,181,182,183,],[27,27,-27,50,27,-64,-65,27,27,-71,-72,-73,-74,50,27,-14,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-69,50,50,27,-24,-26,-33,-34,50,27,-38,-39,-27,50,50,-68,50,-51,-52,-53,-54,-55,50,50,50,50,50,50,50,50,-67,-23,-25,27,-37,50,27,27,27,27,27,-28,-66,27,50,-36,50,50,50,-27,50,50,27,50,27,27,27,-28,50,-77,-40,50,-44,27,-45,-48,27,27,50,27,50,-43,27,-35,-46,27,-41,27,27,50,27,-42,27,27,-47,]),'NOT':([16,17,27,30,31,38,39,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,72,73,74,103,104,105,106,108,109,110,111,112,121,123,133,135,136,138,146,147,151,152,153,154,159,160,162,168,169,170,171,172,173,174,175,178,179,181,182,183,],[31,31,31,31,31,31,-14,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-24,-26,-33,-34,31,-38,-39,-23,-25,31,-37,31,31,31,31,31,31,-36,31,31,31,31,-77,-40,-44,31,-45,-48,31,31,31,-43,31,-35,-46,31,-41,31,31,31,-42,31,31,-47,]),'INTEGERNUMBER':([16,17,27,30,31,38,39,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,72,73,74,103,104,105,106,108,109,110,111,112,121,123,133,135,136,138,146,147,151,152,153,154,158,159,160,162,168,169,170,171,172,173,174,175,178,179,181,182,183,],[32,32,32,32,32,32,-14,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-24,-26,-33,-34,32,-38,-39,-23,-25,32,-37,32,32,32,32,32,32,-36,32,32,32,32,-77,-40,-44,32,-45,-48,32,32,32,32,-43,32,-35,-46,32,-41,32,32,32,-42,32,32,-47,]),'FLOATNUMBER':([16,17,27,30,31,38,39,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,72,73,74,103,104,105,106,108,109,110,111,112,121,123,133,135,136,138,146,147,151,152,153,154,158,159,160,162,168,169,170,171,172,173,174,175,178,179,181,182,183,],[33,33,33,33,33,33,-14,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-24,-26,-33,-34,33,-38,-39,-23,-25,33,-37,33,33,33,33,33,33,-36,33,33,33,33,-77,-40,-44,33,-45,-48,33,33,33,33,-43,33,-35,-46,33,-41,33,33,33,-42,33,33,-47,]),'TRUE':([16,17,27,30,31,38,39,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,72,73,74,103,104,105,106,108,109,110,111,112,121,123,133,135,136,138,146,147,151,152,153,154,158,159,160,162,168,169,170,171,172,173,174,175,178,179,181,182,183,],[34,34,34,34,34,34,-14,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-24,-26,-33,-34,34,-38,-39,-23,-25,34,-37,34,34,34,34,34,34,-36,34,34,34,34,-77,-40,-44,34,-45,-48,34,34,34,34,-43,34,-35,-46,34,-41,34,34,34,-42,34,34,-47,]),'FALSE':([16,17,27,30,31,38,39,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,72,73,74,103,104,105,106,108,109,110,111,112,121,123,133,135,136,138,146,147,151,152,153,154,158,159,160,162,168,169,170,171,172,173,174,175,178,179,181,182,183,],[35,35,35,35,35,35,-14,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-24,-26,-33,-34,35,-38,-39,-23,-25,35,-37,35,35,35,35,35,35,-36,35,35,35,35,-77,-40,-44,35,-45,-48,35,35,35,35,-43,35,-35,-46,35,-41,35,35,35,-42,35,35,-47,]),'LCB':([18,20,21,22,38,39,65,66,67,68,69,73,74,82,103,104,106,123,132,135,136,137,146,147,151,153,154,160,162,168,169,170,171,173,174,175,178,179,181,182,183,],[38,-6,-7,-8,38,-14,38,-24,-26,-33,-34,-38,-39,38,-23,-25,-37,-36,38,38,38,148,-77,-40,-44,-45,-48,38,38,-43,38,-35,-46,-41,38,38,38,-42,38,38,-47,]),'SEMICOLON':([19,20,21,22,25,28,29,32,33,34,35,62,64,71,78,85,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,119,120,126,127,129,140,141,144,149,164,],[39,-6,-7,-8,-27,-64,-65,-71,-72,-73,-74,-69,-70,106,-27,-50,-68,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,123,-28,-66,138,-27,-50,-28,151,-49,159,173,]),'RSB':([25,26,28,29,32,33,34,35,62,64,81,84,85,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,119,120,128,144,],[-27,48,-64,-65,-71,-72,-73,-74,-69,-70,115,119,-50,-68,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-28,-66,140,-49,]),'SUM':([25,26,28,29,32,33,34,35,36,62,63,64,71,78,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,119,120,122,124,125,126,127,128,129,134,140,144,149,161,167,177,],[-27,49,-64,-65,-71,-72,-73,-74,49,-69,49,49,49,-27,49,49,-68,49,-51,-52,-53,-54,-55,49,49,49,49,49,49,49,49,-67,49,-28,-66,49,49,49,49,-27,49,49,49,-28,49,49,49,49,49,]),'MUL':([25,26,28,29,32,33,34,35,36,62,63,64,71,78,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,119,120,122,124,125,126,127,128,129,134,140,144,149,161,167,177,],[-27,51,-64,-65,-71,-72,-73,-74,51,51,51,51,51,-27,51,51,-68,51,51,51,-53,-54,-55,51,51,51,51,51,51,51,51,-67,51,-28,-66,51,51,51,51,-27,51,51,51,-28,51,51,51,51,51,]),'MOD':([25,26,28,29,32,33,34,35,36,62,63,64,71,78,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,119,120,122,124,125,126,127,128,129,134,140,144,149,161,167,177,],[-27,52,-64,-65,-71,-72,-73,-74,52,52,52,52,52,-27,52,52,-68,52,52,52,-53,-54,-55,52,52,52,52,52,52,52,52,-67,52,-28,-66,52,52,52,52,-27,52,52,52,-28,52,52,52,52,52,]),'DIV':([25,26,28,29,32,33,34,35,36,62,63,64,71,78,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,119,120,122,124,125,126,127,128,129,134,140,144,149,161,167,177,],[-27,53,-64,-65,-71,-72,-73,-74,53,53,53,53,53,-27,53,53,-68,53,53,53,-53,-54,-55,53,53,53,53,53,53,53,53,-67,53,-28,-66,53,53,53,53,-27,53,53,53,-28,53,53,53,53,53,]),'AND':([25,26,28,29,32,33,34,35,36,62,63,64,71,78,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,119,120,122,124,125,126,127,128,129,134,140,144,149,161,167,177,],[-27,54,-64,-65,-71,-72,-73,-74,54,-69,54,54,54,-27,54,54,-68,54,-51,-52,-53,-54,-55,-56,54,-58,-59,-60,-61,-62,-63,-67,54,-28,-66,54,54,54,54,-27,54,54,54,-28,54,54,54,54,54,]),'OR':([25,26,28,29,32,33,34,35,36,62,63,64,71,78,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,119,120,122,124,125,126,127,128,129,134,140,144,149,161,167,177,],[-27,55,-64,-65,-71,-72,-73,-74,55,-69,55,55,55,-27,55,55,-68,55,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,55,-28,-66,55,55,55,55,-27,55,55,55,-28,55,55,55,55,55,]),'GT':([25,26,28,29,32,33,34,35,36,62,63,64,71,78,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,119,120,122,124,125,126,127,128,129,134,140,144,149,161,167,177,],[-27,56,-64,-65,-71,-72,-73,-74,56,-69,56,56,56,-27,56,56,-68,56,-51,-52,-53,-54,-55,56,56,-58,-59,56,56,-62,-63,-67,56,-28,-66,56,56,56,56,-27,56,56,56,-28,56,56,56,56,56,]),'GE':([25,26,28,29,32,33,34,35,36,62,63,64,71,78,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,119,120,122,124,125,126,127,128,129,134,140,144,149,161,167,177,],[-27,57,-64,-65,-71,-72,-73,-74,57,-69,57,57,57,-27,57,57,-68,57,-51,-52,-53,-54,-55,57,57,-58,-59,57,57,-62,-63,-67,57,-28,-66,57,57,57,57,-27,57,57,57,-28,57,57,57,57,57,]),'NE':([25,26,28,29,32,33,34,35,36,62,63,64,71,78,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,119,120,122,124,125,126,127,128,129,134,140,144,149,161,167,177,],[-27,58,-64,-65,-71,-72,-73,-74,58,-69,58,58,58,-27,58,58,-68,58,-51,-52,-53,-54,-55,58,58,-58,-59,-60,-61,-62,-63,-67,58,-28,-66,58,58,58,58,-27,58,58,58,-28,58,58,58,58,58,]),'EQ':([25,26,28,29,32,33,34,35,36,62,63,64,71,78,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,119,120,122,124,125,126,127,128,129,134,140,144,149,161,167,177,],[-27,59,-64,-65,-71,-72,-73,-74,59,-69,59,59,59,-27,59,59,-68,59,-51,-52,-53,-54,-55,59,59,-58,-59,-60,-61,-62,-63,-67,59,-28,-66,59,59,59,59,-27,59,59,59,-28,59,59,59,59,59,]),'LE':([25,26,28,29,32,33,34,35,36,62,63,64,71,78,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,119,120,122,124,125,126,127,128,129,134,140,144,149,161,167,177,],[-27,60,-64,-65,-71,-72,-73,-74,60,-69,60,60,60,-27,60,60,-68,60,-51,-52,-53,-54,-55,60,60,-58,-59,60,60,-62,-63,-67,60,-28,-66,60,60,60,60,-27,60,60,60,-28,60,60,60,60,60,]),'LT':([25,26,28,29,32,33,34,35,36,62,63,64,71,78,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,119,120,122,124,125,126,127,128,129,134,140,144,149,161,167,177,],[-27,61,-64,-65,-71,-72,-73,-74,61,-69,61,61,61,-27,61,61,-68,61,-51,-52,-53,-54,-55,61,61,-58,-59,61,61,-62,-63,-67,61,-28,-66,61,61,61,61,-27,61,61,61,-28,61,61,61,61,61,]),'RCB':([38,39,65,66,67,68,69,73,74,103,104,106,123,146,147,148,151,153,154,155,156,157,165,168,170,171,173,174,178,179,183,],[-77,-14,103,-24,-26,-33,-34,-38,-39,-23,-25,-37,-36,-77,-40,-77,-44,-45,-48,164,-30,-32,-31,-43,-35,-46,-41,-77,-29,-42,-47,]),'IF':([38,39,65,66,67,68,69,73,74,103,104,106,123,135,136,146,147,151,153,154,160,162,168,169,170,171,173,174,175,178,179,181,182,183,],[70,-14,70,-24,-26,-33,-34,-38,-39,-23,-25,-37,-36,145,70,-77,-40,-44,-45,-48,70,70,-43,145,-35,-46,-41,70,70,70,-42,70,145,-47,]),'RETURN':([38,39,65,66,67,68,69,73,74,103,104,106,123,135,136,146,147,151,153,154,160,162,168,169,170,171,173,174,175,178,179,181,182,183,],[72,-14,72,-24,-26,-33,-34,-38,-39,-23,-25,-37,-36,72,72,-77,-40,-44,-45,-48,72,72,-43,72,-35,-46,-41,72,72,72,-42,72,72,-47,]),'WHILE':([38,39,65,66,67,68,69,73,74,103,104,106,123,135,136,146,147,151,153,154,160,162,168,169,170,171,173,174,175,178,179,181,182,183,],[75,-14,75,-24,-26,-33,-34,-38,-39,-23,-25,-37,-36,75,75,-77,-40,-44,-45,-48,75,75,-43,75,-35,-46,-41,75,75,75,-42,75,75,-47,]),'ON':([38,39,65,66,67,68,69,73,74,103,104,106,123,135,136,146,147,151,153,154,160,162,168,169,170,171,173,174,175,178,179,181,182,183,],[76,-14,76,-24,-26,-33,-34,-38,-39,-23,-25,-37,-36,76,76,-77,-40,-44,-45,-48,76,76,-43,76,-35,-46,-41,76,76,76,-42,76,76,-47,]),'FOR':([38,39,65,66,67,68,69,73,74,103,104,106,123,135,136,146,147,151,153,154,160,162,168,169,170,171,173,174,175,178,179,181,182,183,],[77,-14,77,-24,-26,-33,-34,-38,-39,-23,-25,-37,-36,77,77,-77,-40,-44,-45,-48,77,77,-43,77,-35,-46,-41,77,77,77,-42,77,77,-47,]),'PRINT':([38,39,65,66,67,68,69,73,74,103,104,106,123,135,136,146,147,151,153,154,160,162,168,169,170,171,173,174,175,178,179,181,182,183,],[79,-14,79,-24,-26,-33,-34,-38,-39,-23,-25,-37,-36,79,79,-77,-40,-44,-45,-48,79,79,-43,79,-35,-46,-41,79,79,79,-42,79,79,-47,]),'ELSE':([39,68,69,73,74,103,106,123,146,147,151,153,154,168,170,171,173,176,179,180,183,],[-14,-33,-34,-38,-39,-23,-37,-36,-77,-40,-44,162,-48,-43,-35,-46,-41,-77,-42,182,-47,]),'ELSEIF':([39,68,69,73,74,103,106,123,146,147,151,153,154,168,170,171,173,176,179,180,183,],[-14,-33,-34,-38,-39,-23,-37,-36,-77,-40,-44,163,-48,-43,-35,-46,-41,-77,-42,163,-47,]),'WHERE':([39,66,67,68,69,73,74,103,104,106,123,146,147,148,151,153,154,155,156,157,165,168,170,171,173,174,178,179,183,],[-14,-24,-26,-33,-34,-38,-39,-23,-25,-37,-36,-77,-40,158,-44,-45,-48,158,-30,-32,-31,-43,-35,-46,-41,-77,-29,-42,-47,]),'IN':([127,],[139,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'epsilon':([0,24,38,146,148,174,176,],[3,43,67,154,157,67,154,]),'dec':([2,],[5,]),'vardec':([2,38,65,135,136,160,162,169,174,175,178,181,182,],[6,74,74,74,74,74,74,74,74,74,74,74,74,]),'funcdec':([2,],[7,]),'idlist':([2,38,65,135,136,160,162,169,174,175,178,181,182,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'iddec':([2,14,38,65,135,136,160,162,169,174,175,178,181,182,],[11,23,11,11,11,11,11,11,11,11,11,11,11,11,]),'type':([13,80,116,131,],[19,114,132,142,]),'exp':([16,17,27,30,31,38,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,65,72,105,108,109,110,111,112,121,133,135,136,138,152,159,160,162,169,172,174,175,178,181,182,],[26,36,62,63,64,71,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,107,122,124,125,126,128,129,134,144,71,71,149,161,167,71,71,71,177,71,71,71,71,71,]),'const':([16,17,27,30,31,38,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,65,72,105,108,109,110,111,112,121,133,135,136,138,152,158,159,160,162,169,172,174,175,178,181,182,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,166,28,28,28,28,28,28,28,28,28,28,]),'lvalue':([16,17,27,30,31,38,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,65,72,105,108,109,110,111,112,121,133,135,136,138,152,159,160,162,169,172,174,175,178,181,182,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'block':([18,38,65,82,132,135,136,160,162,169,174,175,178,181,182,],[37,73,73,117,143,73,73,73,73,73,73,73,73,73,73,]),'paramdecs':([24,],[41,]),'paramdecslist':([24,],[42,]),'paramdec':([24,83,],[44,118,]),'stmtlist':([38,174,],[65,178,]),'stmt':([38,65,136,160,174,175,178,181,],[66,104,147,168,66,179,104,183,]),'ostmt':([38,65,136,160,162,174,175,178,181,],[68,68,68,68,171,68,68,68,68,]),'mstmt':([38,65,135,136,160,162,169,174,175,178,181,182,],[69,69,146,69,69,170,176,69,69,69,69,170,]),'explist':([47,],[86,]),'elseiflist':([146,176,],[153,180,]),'cases':([148,],[155,]),'case':([148,155,],[156,165,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist MAIN LRB RRB block','program',5,'p_program','parsers.py',19),
  ('declist -> declist dec','declist',2,'p_declist','parsers.py',24),
  ('declist -> epsilon','declist',1,'p_declist','parsers.py',25),
  ('dec -> vardec','dec',1,'p_dec','parsers.py',30),
  ('dec -> funcdec','dec',1,'p_dec','parsers.py',31),
  ('type -> INTEGER','type',1,'p_type','parsers.py',35),
  ('type -> FLOAT','type',1,'p_type','parsers.py',36),
  ('type -> BOOLEAN','type',1,'p_type','parsers.py',37),
  ('iddec -> ID','iddec',1,'p_iddec','parsers.py',41),
  ('iddec -> ID LSB exp RSB','iddec',4,'p_iddec','parsers.py',42),
  ('iddec -> ID ASSIGN exp','iddec',3,'p_iddec','parsers.py',43),
  ('idlist -> iddec','idlist',1,'p_idlist','parsers.py',47),
  ('idlist -> idlist COMMA iddec','idlist',3,'p_idlist','parsers.py',48),
  ('vardec -> idlist COLON type SEMICOLON','vardec',4,'p_vardec','parsers.py',52),
  ('funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block','funcdec',8,'p_funcdec','parsers.py',56),
  ('funcdec -> FUNCTION ID LRB paramdecs RRB block','funcdec',6,'p_funcdec','parsers.py',57),
  ('paramdecs -> paramdecslist','paramdecs',1,'p_paramdecs','parsers.py',61),
  ('paramdecs -> epsilon','paramdecs',1,'p_paramdecs','parsers.py',62),
  ('paramdecslist -> paramdec','paramdecslist',1,'p_paramdecslist','parsers.py',66),
  ('paramdecslist -> paramdecslist COMMA paramdec','paramdecslist',3,'p_paramdecslist','parsers.py',67),
  ('paramdec -> ID COLON type','paramdec',3,'p_paramdec','parsers.py',71),
  ('paramdec -> ID LSB RSB COLON type','paramdec',5,'p_paramdec','parsers.py',72),
  ('block -> LCB stmtlist RCB','block',3,'p_block','parsers.py',77),
  ('stmtlist -> stmt','stmtlist',1,'p_stmtlist','parsers.py',82),
  ('stmtlist -> stmtlist stmt','stmtlist',2,'p_stmtlist','parsers.py',83),
  ('stmtlist -> epsilon','stmtlist',1,'p_stmtlist','parsers.py',84),
  ('lvalue -> ID','lvalue',1,'p_lvalue','parsers.py',89),
  ('lvalue -> ID LSB exp RSB','lvalue',4,'p_lvalue','parsers.py',90),
  ('case -> WHERE const COLON stmtlist','case',4,'p_case','parsers.py',95),
  ('cases -> case','cases',1,'p_cases','parsers.py',100),
  ('cases -> cases case','cases',2,'p_cases','parsers.py',101),
  ('cases -> epsilon','cases',1,'p_cases','parsers.py',102),
  ('stmt -> ostmt','stmt',1,'p_stmt','parsers.py',107),
  ('stmt -> mstmt','stmt',1,'p_stmt','parsers.py',108),
  ('mstmt -> IF LRB exp RRB mstmt elseiflist ELSE mstmt','mstmt',8,'p_mstmt','parsers.py',114),
  ('mstmt -> RETURN exp SEMICOLON','mstmt',3,'p_mstmt','parsers.py',115),
  ('mstmt -> exp SEMICOLON','mstmt',2,'p_mstmt','parsers.py',116),
  ('mstmt -> block','mstmt',1,'p_mstmt','parsers.py',117),
  ('mstmt -> vardec','mstmt',1,'p_mstmt','parsers.py',118),
  ('mstmt -> WHILE LRB exp RRB stmt','mstmt',5,'p_mstmt','parsers.py',119),
  ('mstmt -> ON LRB exp RRB LCB cases RCB SEMICOLON','mstmt',8,'p_mstmt','parsers.py',120),
  ('mstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt','mstmt',9,'p_mstmt','parsers.py',121),
  ('mstmt -> FOR LRB ID IN ID RRB stmt','mstmt',7,'p_mstmt','parsers.py',122),
  ('mstmt -> PRINT LRB ID RRB SEMICOLON','mstmt',5,'p_mstmt','parsers.py',123),
  ('ostmt -> IF LRB exp RRB mstmt elseiflist','ostmt',6,'p_ostmt','parsers.py',137),
  ('ostmt -> IF LRB exp RRB mstmt elseiflist ELSE ostmt','ostmt',8,'p_ostmt','parsers.py',138),
  ('elseiflist -> elseiflist ELSEIF LRB exp RRB stmt','elseiflist',6,'p_elseiflist','parsers.py',144),
  ('elseiflist -> epsilon','elseiflist',1,'p_elseiflist','parsers.py',145),
  ('exp -> ID LSB exp RSB ASSIGN exp','exp',6,'p_exp','parsers.py',160),
  ('exp -> ID ASSIGN exp','exp',3,'p_exp','parsers.py',161),
  ('exp -> exp SUM exp','exp',3,'p_exp','parsers.py',162),
  ('exp -> exp SUB exp','exp',3,'p_exp','parsers.py',163),
  ('exp -> exp MUL exp','exp',3,'p_exp','parsers.py',164),
  ('exp -> exp MOD exp','exp',3,'p_exp','parsers.py',165),
  ('exp -> exp DIV exp','exp',3,'p_exp','parsers.py',166),
  ('exp -> exp AND exp','exp',3,'p_exp','parsers.py',167),
  ('exp -> exp OR exp','exp',3,'p_exp','parsers.py',168),
  ('exp -> exp GT exp','exp',3,'p_exp','parsers.py',169),
  ('exp -> exp GE exp','exp',3,'p_exp','parsers.py',170),
  ('exp -> exp NE exp','exp',3,'p_exp','parsers.py',171),
  ('exp -> exp EQ exp','exp',3,'p_exp','parsers.py',172),
  ('exp -> exp LE exp','exp',3,'p_exp','parsers.py',173),
  ('exp -> exp LT exp','exp',3,'p_exp','parsers.py',174),
  ('exp -> const','exp',1,'p_exp','parsers.py',175),
  ('exp -> lvalue','exp',1,'p_exp','parsers.py',176),
  ('exp -> ID LRB explist RRB','exp',4,'p_exp','parsers.py',177),
  ('exp -> LRB exp RRB','exp',3,'p_exp','parsers.py',178),
  ('exp -> ID LRB RRB','exp',3,'p_exp','parsers.py',179),
  ('exp -> SUB exp','exp',2,'p_exp','parsers.py',180),
  ('exp -> NOT exp','exp',2,'p_exp','parsers.py',181),
  ('const -> INTEGERNUMBER','const',1,'p_const','parsers.py',206),
  ('const -> FLOATNUMBER','const',1,'p_const','parsers.py',207),
  ('const -> TRUE','const',1,'p_const','parsers.py',208),
  ('const -> FALSE','const',1,'p_const','parsers.py',209),
  ('explist -> exp','explist',1,'p_explist','parsers.py',224),
  ('explist -> explist COMMA exp','explist',3,'p_explist','parsers.py',225),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','parsers.py',257),
]
